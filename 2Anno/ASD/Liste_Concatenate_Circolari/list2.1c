#include <stdio.h>
#include <stdlib.h>

// Generico elemento di una lista
typedef struct list_el{
    int key;
    struct list_el* next;

}list_element;

// Generica lista
typedef list_element* list;


/* La funzione get_list() costruisce una lista standard di interi leggendone la lunghezza e
 gli elementi da standard input. Non Ã¨ necessario che gli elementi
 vengano inseriti nella lista nell'ordine in cui vengono letti.*/
list get_list();

/* La procedura print_standard_list(list l) stampa su standard output gli interi presenti in una lista
 concatentata standard l.*/
void print_standard_list(list);

/* La funzione make_circular_list(list l, int k) trasforma la lista concatenata standard l in una lista
 circolare contentente tutti e soli gli elementi di l e avente prefisso di lunghezza k.
 In particolare, il k+1-esimo elemento della lista l Ã¨ quello che diventa successore di due
 elementi distinti. Se k+1<=0 o k+1 Ã¨ maggiore della
 lunghezza della lista, la lista restituita in output sarÃ  la lista standard l.*/
list make_circular_list(list,int k);


/* La funzione test_is_circular(list l) stabilisce se la lista l e' circolare o meno.
 Se la lista non e' circolare viene restituito in output -1. Se la lista e' circolare viene
 restituito in output un valore maggiore o uguale alla lunghezza del prefisso
 della lista circolare.*/
int test_is_circular_list(list);


/* La procedura print_circular_list(list l, int k) stampa su standard output gli interi contenuti
 nella lista circolare l avente prefisso di lunghezza al piu' k separandoli in due blocchi:
 i primi k elementi; i successivi j elementi che formano il ciclo. Se k e' maggiore rispetto alla
 lunghezza del prefisso e' lecito stampare piu' volte un elemento.*/
void print_circular_list(list,int k);

/* La pricedura stampa la lunghezza della lista, nel caso di una lista circolare viene restituito -1*/
int list_length(list);

/* La procedura free_memory_list(list l) libera la memoria allocata nello heap per la lista l.
 L'implementazione di questa procedura e' opzionale*/
void free_memory_list(list);

list get_list()
{
   list p,head;
   int i, n;

   printf("\n Inserisci la lunghezza della lista: ");
   scanf("%d", &n);

     if(n==0){
      p = NULL; //crea lista vuota
       }else{ //crea il primo elemento della lista
      p = (struct list_el *)malloc(sizeof(struct list_el));
      printf("\nInserisci il primo valore: ");
      scanf("%d", &p->key);
      head = p;

      for(i=2; i<=n; i++){ //Inserimento valori sucessivi
         head->next = (struct list_el *)malloc(sizeof(struct list_el));
         head = head->next;
         printf("\nInserisci il %d elemento: ",i);
         scanf("%d",&head->key);
      }
      head->next = NULL; // marcatore fine lista
   }
   return(p);
}

void print_standard_list(list p){

   printf("\nLista: ");

   while(p != NULL){
      printf("%d", p->key);
      printf("->");
      p = p->next;
   }
   printf("NULL\n");
}

int list_length(list p){

    int i=0;

    if(test_is_circular_list(p) == -1){
        while(p->next != NULL){
            i++;
            p = p->next;
        }
    }else i=-2;

    return (i+1);
}

list make_circular_list(list p,int k){

    list temp = p,temp2 = p;
    int i=0,l=0;

    l = list_length(p);

    while(temp->next != NULL){
        temp = temp->next;
    }
    if(k>=l || k+1<=0){
    }else{
        for(i=0;i<k;i++){
            temp2 = temp2->next;
            if(temp2==NULL){
                return(temp);
                }
            }
        temp->next = temp2;
    }
    return(p);
}

void print_circular_list(list p,int k){

    list temp = p;
    int i=0,j=0,l=0;

    l = list_length(temp);

    printf("\nLista: ");
    printf("%d->",temp->key);
    temp = temp->next;

    while (i<k-1 && temp != NULL ){
        printf("%d->", temp->key);
        temp = temp->next;
        i++;
        if(temp->next==NULL){
            printf("%d->", temp->key);
            break;
        }

    }

    if(l==-1){ //la lista e' circolare
    printf(" ciclo: ");
        for(j=0;j<10;j++){
            printf("%d->", temp->key);
        temp = temp->next;
        }


    }else if(k+1<=0){
        while(temp != NULL){
            printf("%d->", temp->key);
            temp = temp->next;
            }
        printf("NULL");
        }else if(l>-1){
            printf("NULL"); //lista standard;
        }
}

int test_is_circular_list(list p){

   list slower,faster;
   slower = p;       //scansione lenta della lista
   faster = p->next; //scansione veloce della lista(parte prima)
   int i=0;

   while(1) {
    if( faster == NULL|| faster->next == NULL){
      return -1; //lista circolare
     }else if(faster == slower || faster->next == slower){
       return i; //lista standard, restituisce k
     }else{
       slower = slower->next;       //scansiona ogni elemento
       faster = faster->next->next; //scansiona ogni 2 elementti
       i++;
      }
   }
}

void free_memory_list(list p){
    list curr;
    while((curr=p) != NULL){
        p = p->next;
        free(curr);
    }
}

int main(){

    int c,k;
    list lista; // puntatore della lista

    lista = get_list(); // crea la lista
    print_standard_list(lista); // stampa la lista (standard)
    printf("\nRendere la lista circolare? (1/0) ");
    scanf("%d", &c);

    if(c==1){
        printf("\nIserisci k ");
        scanf("%d", &k);
        make_circular_list(lista,k);
        print_circular_list(lista,k);
    }else{
    }

    printf("\n\nLiberare la memoria? (1/0) ");
    scanf("%d", &c);
    if(c==1){
        return test_is_circular_list(lista);
        free_memory_list(lista);
    }else{
        return test_is_circular_list(lista);
    }
}
